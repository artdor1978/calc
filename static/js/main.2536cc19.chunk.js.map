{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["elementsArr","sign","title","id","Elements","props","className","z","xxx","map","item","key","onClick","inpNum","App","state","message","handleClickNum","bind","handleClickClear","handleClickRes","e","updDisplay","this","test","setState","replace","strSplit","split","length","includes","join","parseFloat","eval","toFixed","filter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2536cc19.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst elementsArr = [\r\n  {\r\n  sign: \"=\",\r\n  title: \"equals\",\r\n  id:0,\r\n  },\r\n  {\r\n  sign: \"1\",\r\n  title:  \"one\",\r\n  id:2,\r\n  },\r\n  {\r\n  sign: \"2\",\r\n  title:  \"two\",\r\n  id:3,\r\n  },\r\n  {\r\n  sign: \"3\",\r\n  title:  \"three\",\r\n  id:4,\r\n  },\r\n  {\r\n  sign: \"4\",\r\n  title:  \"four\",\r\n  id:5,\r\n  },\r\n  {\r\n  sign: \"5\",\r\n  title:  \"five\",\r\n  id:6,\r\n  },\r\n  {\r\n  sign: \"6\",\r\n  title:  \"six\",\r\n  id:7,\r\n  },\r\n  {\r\n  sign: \"7\",\r\n  title:  \"seven\",\r\n  id:8,\r\n  },\r\n  {\r\n  sign: \"8\",\r\n  title:  \"eight\",\r\n  id:9,\r\n  },\r\n  {\r\n  sign: \"9\",\r\n  title:  \"nine\",\r\n  id:10,\r\n  },\r\n  {\r\n  sign: \"0\",\r\n  title: \"zero\",\r\n  id:1,\r\n  },\r\n  {\r\n  sign: \"+\",\r\n  title:  \"add\",\r\n  id:11,\r\n  },\r\n  {\r\n  sign: \"-\",\r\n  title:  \"subtract\",\r\n  id:12,\r\n  },\r\n  {\r\n  sign: \"*\",\r\n  title:  \"multiply\",\r\n  id:13,\r\n  },\r\n  {\r\n  sign: \"/\",\r\n  title:  \"divide\",\r\n  id:14,\r\n  },\r\n  {\r\n  sign: \".\",\r\n  title:  \"decimal\",\r\n  id:15,\r\n  },\r\n  {\r\n  sign: \"clear\",\r\n  title:  \"clear\",\r\n  id:16,\r\n  },\r\n];\r\n\r\nconst Elements = (props) => {\r\n  return (\r\n    <div className={props.z}>\r\n      {props.xxx.map (item =>\r\n      <div key={item.id}> \r\n        <div className=\"button\" id={item.title} onClick={() => props.inpNum(item.sign)}>{item.sign}</div>\r\n      </div>\r\n      )}\r\n    </div>\r\n    )\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    elementsArr,\r\n    message:'0',\r\n    };\r\n    this.handleClickNum = this.handleClickNum.bind(this);\r\n    this.handleClickClear = this.handleClickClear.bind(this);\r\n    this.handleClickRes = this.handleClickRes.bind(this);\r\n  }\r\n  handleClickNum(e) {\r\n    const updDisplay = this.state.message\r\n    if (/[-+/*]$/.test(updDisplay)&&/[+/*]/.test(e)) {\r\n\r\n    this.setState({message:updDisplay.replace(/[-+/*]+$/,e)}) } else {\r\n        const strSplit = updDisplay.split(/([-+/*])/);\r\n        strSplit[strSplit.length-1].includes('.')&& e=='.' ? this.setState({message: strSplit.join('')}) : \r\n      (updDisplay == '0' ? this.setState({message: e,}) : this.setState({message: strSplit.join('')+e,}))}\r\n  }\r\n  handleClickClear(e) {\r\n    this.setState({\r\n      message: '0'\r\n    })\r\n  }\r\n  handleClickRes(e) {\r\n    const updDisplay = this.state.message\r\n    this.setState({\r\n      message: parseFloat(eval(updDisplay).toFixed(4))+'',\r\n    })\r\n  }\r\n  render() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>JS Calculator</h1>\r\n      <div id=\"calc\">\r\n      <div id=\"display\">{this.state.message}</div>\r\n        <span id=\"numbers\">\r\n          <Elements  xxx={this.state.elementsArr.filter(item => item.id>0&item.id<11||item.id==15)} z='num' inpNum={this.handleClickNum}/>\r\n        </span>\r\n        <span id=\"clearKey\">\r\n          <Elements xxx={this.state.elementsArr.filter(item => item.id==16)} z='cle' inpNum={this.handleClickClear}/>\r\n        </span>\r\n        <span id=\"operators\">\r\n          <Elements  xxx={this.state.elementsArr.filter(item => item.id>10&item.id<15)} z='ope' inpNum={this.handleClickNum}/>\r\n        </span>\r\n        <span id=\"equalsKey\">\r\n        <Elements  xxx={this.state.elementsArr.filter(item => item.id==0)} z='equ' inpNum={this.handleClickRes}/>\r\n        </span>\r\n      </div>\r\n      <h6 >artdor1978</h6>\r\n    </div>\r\n  )\r\n}\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\nif (module.hot) {\r\nmodule.hot.accept();\r\n}"],"sourceRoot":""}